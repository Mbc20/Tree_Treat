/*BUYER DELETE TRIGGER*/
CREATE TABLE LOG_TABLE_BUYER_DELETED(
BUYER_NAME VARCHAR2(50),
BUYER_EMAIL VARCHAR2(50),
BUYER_CONTACT CHAR(30),
USERNAME VARCHAR2(30),
DATE_TIME DATE
);

CREATE OR REPLACE TRIGGER BACKUP_DELETED_BUYER 
BEFORE DELETE
ON BUYER
FOR EACH ROW 
DECLARE
D_NAME VARCHAR2(50);
D_EMAIL VARCHAR2(50);
D_CONTACT CHAR(30);
USERNAME VARCHAR2(30);
BEGIN
D_NAME := :OLD.NAME;
D_EMAIL := :OLD.EMAIL;
D_CONTACT := :OLD.CONTACT;
USERNAME := USER;
INSERT INTO LOG_TABLE_BUYER_DELETED VALUES(D_NAME, D_EMAIL, D_CONTACT, USERNAME, SYSDATE);
END;

DELETE FROM BUYER WHERE BUYER_ID = 46;
-- DROP TRIGGER BACKUP_DELETED_BUYER;



/*SELLER DELETE TRIGGER*/
CREATE TABLE LOG_TABLE_SELLER_DELETED(
SELLER_NAME VARCHAR2(50),
SELLER_EMAIL VARCHAR2(50),
SELLER_CONTACT CHAR(30),
SELLER_LOCATION_ID INTEGER,
USERNAME VARCHAR2(30),
DATE_TIME DATE
);

CREATE OR REPLACE TRIGGER BACKUP_DELETED_SELLER 
BEFORE DELETE
ON SELLER 
FOR EACH ROW 
DECLARE
D_NAME VARCHAR2(50);
D_EMAIL VARCHAR2(50);
D_CONTACT CHAR(30);
D_LOCATION_ID INTEGER;
USERNAME VARCHAR2(30);
BEGIN
D_NAME := :OLD.NAME;
D_EMAIL := :OLD.EMAIL;
D_CONTACT := :OLD.CONTACT;
D_LOCATION_ID := :OLD.LOCATION_ID;
USERNAME := USER;
INSERT INTO LOG_TABLE_SELLER_DELETED VALUES(D_NAME, D_EMAIL, D_CONTACT, D_LOCATION_ID, USERNAME, SYSDATE);
END;


DELETE FROM SELLER WHERE SELLER_ID = 46;
-- DROP TRIGGER BACKUP_DELETED_SELLER;



/*UPDATE BUYER PASSWORD TRIGGER*/
CREATE TABLE LOG_TABLE_BUYER_PASSWORD_UPDATE(
OLD_PASSWORD VARCHAR2(30),
NEW_PASSWORD VARCHAR2(30),
USERNAME VARCHAR2(30),
DATE_TIME DATE
);


CREATE OR REPLACE TRIGGER BUYER_PASSWORD_RESET
AFTER UPDATE
OF PASSWORD
ON BUYER
FOR EACH ROW
DECLARE 
OLD_PASS VARCHAR2(30);
NEW_PASS VARCHAR2(30);
USERNAME VARCHAR2(30);
BEGIN
OLD_PASS := :OLD.PASSWORD;
NEW_PASS := :NEW.PASSWORD;
USERNAME := USER;
INSERT INTO LOG_TABLE_BUYER_PASSWORD_UPDATE VALUES(OLD_PASS, NEW_PASS, USERNAME, SYSDATE);
END;

UPDATE BUYER SET PASSWORD = 'WREEENEE' WHERE BUYER_ID = 46;

-- DROP TRIGGER BUYER_PASSWORD_RESET;



/*UPDATE SELLER PASSWORD TRIGGER*/
CREATE TABLE LOG_TABLE_SELLER_PASSWORD_UPDATE(
OLD_PASSWORD VARCHAR2(30),
NEW_PASSWORD VARCHAR2(30),
USERNAME VARCHAR2(30),
DATE_TIME DATE
);


CREATE OR REPLACE TRIGGER SELLER_PASSWORD_RESET
AFTER UPDATE
OF PASSWORD
ON SELLER
FOR EACH ROW
DECLARE 
OLD_PASS VARCHAR2(30);
NEW_PASS VARCHAR2(30);
USERNAME VARCHAR2(30);
BEGIN
OLD_PASS := :OLD.PASSWORD;
NEW_PASS := :NEW.PASSWORD;
USERNAME := USER;
INSERT INTO LOG_TABLE_SELLER_PASSWORD_UPDATE VALUES(OLD_PASS, NEW_PASS, USERNAME, SYSDATE);
END;

UPDATE SELLER SET PASSWORD = 'abidmomo' WHERE SELLER_ID = 46;

-- DROP TRIGGER SELLER_PASSWORD_RESET;





/*gift queries*/
-- SELECT P.PRODUCT_ID, P.PRODUCT_NAME ,P.AVAILABLE_QUANTITY
-- FROM PRODUCT P JOIN GIFT G
-- ON P.PRODUCT_ID = G.PRODUCT_ID
-- WHERE P.CATEGORY = 'plant' AND P.PRODUCT_NAME LIKE '%ang%' ;


/*COMMERCIAL QUERIES*/
SELECT P.PRODUCT_ID, P.PRODUCT_NAME ,P.AVAILABLE_QUANTITY
FROM PRODUCT P JOIN GIFT G
ON P.PRODUCT_ID = G.PRODUCT_ID
WHERE P.CATEGORY = 'plant' AND INSTR(UPPER(P.PRODUCT_NAME),UPPER('ang'))>0 ;


SELECT P.PRODUCT_ID, P.PRODUCT_NAME ,P.AVAILABLE_QUANTITY
FROM PRODUCT P JOIN GIFT G
ON P.PRODUCT_ID = G.PRODUCT_ID
WHERE P.CATEGORY = 'seed' AND INSTR(UPPER(P.PRODUCT_NAME),UPPER('as'))>0 ;


SELECT P.PRODUCT_ID, P.PRODUCT_NAME ,P.AVAILABLE_QUANTITY
FROM PRODUCT P JOIN GIFT G
ON P.PRODUCT_ID = G.PRODUCT_ID
WHERE P.CATEGORY = 'accessories' AND INSTR(UPPER(P.PRODUCT_NAME),UPPER('hear'))>0 ;



/*commercial queries*/
SELECT P.PRODUCT_ID, P.PRODUCT_NAME, P.AVAILABLE_QUANTITY, C.PRICE
FROM PRODUCT P JOIN COMMERCIAL C
ON P.PRODUCT_ID = C.PRODUCT_ID
WHERE P.CATEGORY ='plant' AND INSTR(UPPER(P.PRODUCT_NAME),UPPER('flower'))>0 ;


SELECT P.PRODUCT_ID, P.PRODUCT_NAME, P.AVAILABLE_QUANTITY, C.PRICE
FROM PRODUCT P JOIN COMMERCIAL C
ON P.PRODUCT_ID = C.PRODUCT_ID
WHERE P.CATEGORY ='seed' AND INSTR(UPPER(P.PRODUCT_NAME),UPPER('flower'))>0 ;


SELECT P.PRODUCT_ID, P.PRODUCT_NAME, P.AVAILABLE_QUANTITY, C.PRICE
FROM PRODUCT P JOIN COMMERCIAL C
ON P.PRODUCT_ID = C.PRODUCT_ID
WHERE P.CATEGORY ='accessories' AND INSTR(UPPER(P.PRODUCT_NAME),UPPER('ose'))>0 ;


/*wishlist queries*/
-- DECLARE
--   V_BUYER_ID   INTEGER;
--   --V_PRODUCT_ID INTEGER := 5;
--   --V_QUANTITY   INTEGER;
--   V_PRICE_PER_PIECE FLOAT;
--   V_TIME_DATE DATE;
-- 	G_PRODUCT_ID INTEGER;
-- BEGIN
--   SELECT BUYER_ID INTO V_BUYER_ID
--   FROM BUYER
--   WHERE EMAIL = 'maria55@gmail.com' AND PASSWORD = 'treeLove2';
-- 
--   --V_QUANTITY := 1;
-- 
--   SELECT C.PRICE INTO V_PRICE_PER_PIECE
--   FROM PRODUCT P JOIN COMMERCIAL C ON (P.PRODUCT_ID = C.PRODUCT_ID)
--   WHERE P.PRODUCT_ID = 5;
-- 	
-- 	
-- 	IF V_PRICE_PER_PIECE IS NOT NULL THEN
-- 	INSERT INTO PRODUCT_IN_WISHLIST VALUES (V_BUYER_ID, 5,1, V_PRICE_PER_PIECE, SYSDATE);
-- 	END IF;
-- 	
-- 	
--   IF V_PRICE_PER_PIECE IS NULL THEN
-- 	
-- 	SELECT BUYER_ID INTO V_BUYER_ID
--   FROM BUYER
--   WHERE EMAIL = 'maria55@gmail.com' AND PASSWORD = 'treeLove2';
-- 	
-- 	V_PRICE_PER_PIECE := NULL;
-- 	INSERT INTO PRODUCT_IN_WISHLIST VALUES (V_BUYER_ID, 5,1, V_PRICE_PER_PIECE, SYSDATE);
-- 	END IF;
-- 	
-- END;
-- /

/*COMMERCIAL PLANT SEARCH BY LOCATION*/
SELECT P.PRODUCT_NAME, P.AVAILABLE_QUANTITY, C.PRICE
FROM PRODUCT P JOIN COMMERCIAL C ON (P.PRODUCT_ID = C.PRODUCT_ID)
WHERE P.CATEGORY ='plant' AND P.PRODUCT_ID IN(
SELECT PRODUCT_ID
FROM COMMERCIAL_OWNER 
WHERE SELLER_ID IN (
SELECT SELLER_ID
FROM SELLER S JOIN SELLER_LOCATION SL ON(S.LOCATION_ID = SL.LOCATION_ID)
WHERE INSTR(UPPER(SL.DISTRICT),UPPER('sadar'))>0 OR INSTR(UPPER(SL.THANA),UPPER('sadar'))>0 OR INSTR(UPPER(SL.AREA),UPPER('sadar'))>0 
)
);


/*COMMERCIAL SEED SEARCH BY LOCATION*/
SELECT P.PRODUCT_NAME, P.AVAILABLE_QUANTITY, C.PRICE
FROM PRODUCT P JOIN COMMERCIAL C ON (P.PRODUCT_ID = C.PRODUCT_ID)
WHERE P.CATEGORY ='seed' AND P.PRODUCT_ID IN(
SELECT PRODUCT_ID
FROM COMMERCIAL_OWNER 
WHERE SELLER_ID IN (
SELECT SELLER_ID
FROM SELLER S JOIN SELLER_LOCATION SL ON(S.LOCATION_ID = SL.LOCATION_ID)
WHERE INSTR(UPPER(SL.DISTRICT),UPPER('sadar'))>0 OR INSTR(UPPER(SL.THANA),UPPER('sadar'))>0 OR INSTR(UPPER(SL.AREA),UPPER('sadar'))>0 
)
);

/*COMMERCIAL ACCESSORIES SEARCH BY LOCATION*/
SELECT P.PRODUCT_NAME, P.AVAILABLE_QUANTITY, C.PRICE
FROM PRODUCT P JOIN COMMERCIAL C ON (P.PRODUCT_ID = C.PRODUCT_ID)
WHERE P.CATEGORY ='accessories' AND P.PRODUCT_ID IN(
SELECT PRODUCT_ID
FROM COMMERCIAL_OWNER 
WHERE SELLER_ID IN (
SELECT SELLER_ID
FROM SELLER S JOIN SELLER_LOCATION SL ON(S.LOCATION_ID = SL.LOCATION_ID)
WHERE INSTR(UPPER(SL.DISTRICT),UPPER('sadar'))>0 OR INSTR(UPPER(SL.THANA),UPPER('sadar'))>0 OR INSTR(UPPER(SL.AREA),UPPER('sadar'))>0 
)
);


/*GIFT PRODUCT SEARCH BY LOCATION*/
SELECT P.PRODUCT_NAME, P.AVAILABLE_QUANTITY
FROM PRODUCT P 
WHERE P.CATEGORY ='accessories' AND P.PRODUCT_ID IN(
SELECT PRODUCT_ID
FROM GIFT_OWNER 
WHERE SELLER_ID IN (
SELECT SELLER_ID
FROM SELLER S JOIN SELLER_LOCATION SL ON(S.LOCATION_ID = SL.LOCATION_ID)
WHERE INSTR(UPPER(SL.DISTRICT),UPPER('tola'))>0 OR INSTR(UPPER(SL.THANA),UPPER('tola'))>0 OR INSTR(UPPER(SL.AREA),UPPER('tola'))>0 
)
);


/*GIFT PLANT SEARCH BY LOCATION*/
SELECT PRODUCT_NAME, AVAILABLE_QUANTITY
FROM PRODUCT  
WHERE CATEGORY ='plant' AND PRODUCT_ID IN(
SELECT PRODUCT_ID
FROM GIFT_OWNER 
WHERE SELLER_ID IN (
SELECT SELLER_ID
FROM SELLER S JOIN SELLER_LOCATION SL ON(S.LOCATION_ID = SL.LOCATION_ID)
WHERE INSTR(UPPER(SL.DISTRICT),UPPER('tola'))>0 OR INSTR(UPPER(SL.THANA),UPPER('tola'))>0 OR INSTR(UPPER(SL.AREA),UPPER('tola'))>0 
)
);


/*GIFT SEED SEARCH BY LOCATION*/
SELECT PRODUCT_NAME, AVAILABLE_QUANTITY
FROM PRODUCT  
WHERE CATEGORY ='seed' AND PRODUCT_ID IN(
SELECT PRODUCT_ID
FROM GIFT_OWNER 
WHERE SELLER_ID IN (
SELECT SELLER_ID
FROM SELLER S JOIN SELLER_LOCATION SL ON(S.LOCATION_ID = SL.LOCATION_ID)
WHERE INSTR(UPPER(SL.DISTRICT),UPPER('tola'))>0 OR INSTR(UPPER(SL.THANA),UPPER('tola'))>0 OR INSTR(UPPER(SL.AREA),UPPER('tola'))>0 
)
);


/*GIFT ACCESSORIES SEARCH BY LOCATION*/
SELECT PRODUCT_NAME, AVAILABLE_QUANTITY
FROM PRODUCT  
WHERE CATEGORY ='accessories' AND PRODUCT_ID IN(
SELECT PRODUCT_ID
FROM GIFT_OWNER 
WHERE SELLER_ID IN (
SELECT SELLER_ID
FROM SELLER S JOIN SELLER_LOCATION SL ON(S.LOCATION_ID = SL.LOCATION_ID)
WHERE INSTR(UPPER(SL.DISTRICT),UPPER('tola'))>0 OR INSTR(UPPER(SL.THANA),UPPER('tola'))>0 OR INSTR(UPPER(SL.AREA),UPPER('tola'))>0 
)
);




/*WISHLIST QUERY */

SELECT P.PRODUCT_ID,P.PRODUCT_NAME, COUNT(*) AS QUANTITY, PW.PRICE_PER_PIECE*COUNT(*) AS PRICE
FROM PRODUCT P
JOIN PRODUCT_IN_WISHLIST PW ON (P.PRODUCT_ID = PW.PRODUCT_ID)
WHERE PW.BUYER_ID IN (
    SELECT B.BUYER_ID
    FROM BUYER B
    WHERE EMAIL = 'habiba94@gmail.com' AND PASSWORD = 'habibi'
)
GROUP BY P.PRODUCT_ID,P.PRODUCT_NAME,PW.PRICE_PER_PIECE;




/*SHOW INFOS OF PRODUCT AND SELLER QUERY*/
SELECT P.PRODUCT_NAME, S.NAME, S.EMAIL, S.CONTACT, SL.DISTRICT, SL.THANA, SL.AREA, SL.DETAILS
FROM PRODUCT P JOIN COMMERCIAL_OWNER CW ON (CW.PRODUCT_ID = P.PRODUCT_ID)
JOIN SELLER S ON (S.SELLER_ID = CW.SELLER_ID)
JOIN SELLER_LOCATION SL ON (S.LOCATION_ID = SL.LOCATION_ID)
WHERE P.PRODUCT_ID = 3
UNION
(
SELECT P.PRODUCT_NAME, S.NAME, S.EMAIL, S.CONTACT, SL.DISTRICT, SL.THANA, SL.AREA, SL.DETAILS
FROM PRODUCT P JOIN GIFT_OWNER GW ON (GW.PRODUCT_ID = P.PRODUCT_ID)
JOIN SELLER S ON (S.SELLER_ID = GW.SELLER_ID)
JOIN SELLER_LOCATION SL ON (S.LOCATION_ID = SL.LOCATION_ID)
WHERE P.PRODUCT_ID = 3
);



/*seller product queries */
CREATE OR REPLACE PROCEDURE DECREASE (P_ID IN INTEGER) IS
Q INTEGER;
BEGIN
SELECT AVAILABLE_QUANTITY INTO Q FROM PRODUCT WHERE PRODUCT_ID = P_ID;
Q := Q - 1;
IF Q = 0 THEN
DELETE FROM PRODUCT WHERE PRODUCT_ID = P_ID;
ELSE
UPDATE PRODUCT SET AVAILABLE_QUANTITY = Q WHERE PRODUCT_ID = P_ID;
END IF;
COMMIT;
END;
/

DECLARE
BEGIN
DECREASE(76);
END;




CREATE OR REPLACE PROCEDURE INCREASE (P_ID IN INTEGER) IS
Q INTEGER;
BEGIN
SELECT AVAILABLE_QUANTITY INTO Q FROM PRODUCT WHERE PRODUCT_ID = P_ID;
Q := Q + 1;
UPDATE PRODUCT SET AVAILABLE_QUANTITY = Q  WHERE PRODUCT_ID = P_ID;
COMMIT;
END;
/

DECLARE
BEGIN
INCREASE(4);
END;



CREATE OR REPLACE PROCEDURE REMOVE (P_ID IN INTEGER) IS
BEGIN
DELETE FROM PRODUCT WHERE PRODUCT_ID = P_ID;
COMMIT;
END;
/

BEGIN
REMOVE(76);
END;


-- DECLARE
-- CID NUMBER;
-- BEGIN
-- SELECT MAX(BUYER_ID) INTO CID FROM BUYER;
-- CID := CID + 1;
-- INSERT INTO BUYER (BUYER_ID, NAME, EMAIL, PASSWORD, CONTACT) VALUES (C,:NAME,:EMAIL,:PASSWORD,:CONTACT);
-- COMMIT;
-- END;


/*LAUNCH COMMERCIAL*/
DECLARE
CID NUMBER;
BEGIN
SELECT MAX(PRODUCT_ID) INTO CID FROM PRODUCT;
CID := CID + 1;
INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, AVAILABLE_QUANTITY, CATEGORY) VALUES (CID, 'daisy', 20, 'plant');
INSERT INTO COMMERCIAL (PRODUCT_ID, PRICE) VALUES (CID, 100);
INSERT INTO COMMERCIAL_OWNER (SELLER_ID, PRODUCT_ID) VALUES (4, CID);
COMMIT;
END;



/*LAUNCH GIFT*/
DECLARE
GID NUMBER;
BEGIN
SELECT MAX(PRODUCT_ID) INTO GID FROM PRODUCT;
GID := GID + 1;
INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_NAME, AVAILABLE_QUANTITY, CATEGORY) VALUES (GID, 'rose', 5, 'plant');
INSERT INTO GIFT (PRODUCT_ID) VALUES (GID);
INSERT INTO GIFT_OWNER (SELLER_ID, PRODUCT_ID) VALUES (32, GID);
COMMIT;
END;


DELETE FROM SELLER WHERE SELLER_ID = 12;






-- DECLARE 
-- BEGIN
-- FOR R IN (
-- SELECT PRODUCT_ID FROM COMMERCIAL_OWNER
-- WHERE SELLER_ID = 12
-- UNION 
-- SELECT PRODUCT_ID FROM GIFT_OWNER
-- WHERE SELLER_ID = 12
--  )
-- LOOP
-- DELETE FROM PRODUCT WHERE PRODUCT_ID = R.PRODUCT_ID;
-- COMMIT;
-- END LOOP;
-- DELETE FROM SELLER WHERE SELLER_ID = 12;
-- COMMIT;
-- END;
-- /



/*SELLER ACCOUNT DELETE*/
DECLARE
SLID INTEGER;
BEGIN
SELECT SELLER_ID INTO SLID FROM SELLER WHERE EMAIL = 'imranhaque@gmail.com' AND PASSWORD = 'imran777';
FOR R IN (
SELECT PRODUCT_ID FROM COMMERCIAL_OWNER
WHERE SELLER_ID = SLID
UNION 
SELECT PRODUCT_ID FROM GIFT_OWNER
WHERE SELLER_ID = SLID
 )
LOOP
DELETE FROM PRODUCT WHERE PRODUCT_ID = R.PRODUCT_ID;
COMMIT;
END LOOP;
DELETE FROM SELLER WHERE SELLER_ID = SLID;
COMMIT;
END;
/



/*delete from wishlist*/
-- BEGIN
-- SELECT BUYER_ID FROM BUYER 
-- WHERE EMAIL = 'sumon200@gmail.com' AND PASSWORD = 'happy2me'
-- FOR R IN (
-- SELECT BUYER_ID FROM PRODUCT_IN_WISHLIST
-- LOOP
-- DELETE FROM PRODUCT_IN_WISHLIST WHERE PRODUCT_ID = R.PRODUCT_ID;
-- COMMIT;
-- END LOOP;
-- END;



DECLARE
B_ID INTEGER;
BEGIN
SELECT BUYER_ID INTO B_ID
FROM BUYER 
WHERE EMAIL = 'sumon200@gmail.com' AND PASSWORD = 'happy2me';

FOR R IN (SELECT PRODUCT_ID FROM PRODUCT_IN_WISHLIST WHERE BUYER_ID = B_ID AND PRODUCT_ID=3) 
LOOP
DELETE FROM PRODUCT_IN_WISHLIST WHERE PRODUCT_ID = R.PRODUCT_ID;
COMMIT;
END LOOP;
END;






















